/**这里使用 project-version.properties 作为配置文件，*/
ext.versionFile = file('version.properties')
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    println 'Reading the version file.'

    if (!ext.versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()
    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }
    /**新建 ProjectVersion 对象，使用配置文件的属性值为对象赋值*/
    return new ProjectVersion(min: versionProps.major.toInteger(), maj: versionProps.minor.toInteger(), prodReady: versionProps.release.toBoolean())
}
/**为自定义的ReleaseVersionTask 的参数release、destFile赋值*/
task makeReleaseVersion(type: ReleaseVersionTask) {
    release = version.prodReady
    destFile = new File('version.properties')
}
task printVersion {
    doLast {
        println("Version: $version")
    }
}
/**自定义task继承DefaultTask*/
class ReleaseVersionTask extends DefaultTask {
    /**task的输入输出注解， @Input注解声明task的输入属性：release
     * OutputFile注解定义输出文件，
     * 不使用注解也可以实现修改配置文件属性值的需求，因为会默认为属性生成setter和getter方法，
     * 但是无法做到增量式构建，使用注解，Gradle会比较两次的input和output是否是最新的，
     * 只有是最新的时候(比如手动修改了配置文件)，task才会被执行，达到增量式构建的效果*/
    @Input
    Boolean release
    @OutputFile
    File destFile

    ReleaseVersionTask() {
        /**设置task的属性，描述性的参数*/
        group = 'versioning'
        description = 'Makes project a release version.'
    }
    /**执行makeReleaseVersion 任务时，会将两个参数传进来，然后执行被@TaskAction注解声明的方法*/
    @TaskAction
    void start() {
        println("start")
        project.version.prodReady = true
        /**修改配置文件的属性值*/
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

class ProjectVersion {
    Integer min
    Integer maj
    Boolean prodReady
    /**此例中使用了 min: versionProps.major.toInteger() 的方式为对象赋值，也可以使用构造参数*/
    @Override
    String toString() {
        "$maj.$min${prodReady ? '' : '-SNAPSHOT'}"
    }
}